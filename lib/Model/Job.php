<?php
/**
 * Job
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  MergeATSClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Merge ATS API
 *
 * The unified API for building rich integrations with multiple Applicant Tracking System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MergeATSClient\Model;

use \ArrayAccess;
use \MergeATSClient\ObjectSerializer;

/**
 * Job Class Doc Comment
 *
 * @category Class
 * @description # The Job Object ### Description The &#x60;Job&#x60; object is used to represent a Job offering at a company. ### Usage Example Fetch from the &#x60;LIST Jobs&#x60; endpoint to show all job postings.
 * @package  MergeATSClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Job implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Job';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'remote_id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'code' => 'string',
        'status' => 'JobStatusEnum',
        'job_posting_urls' => '\MergeATSClient\Model\Url[]',
        'remote_created_at' => '\DateTime',
        'remote_updated_at' => '\DateTime',
        'confidential' => 'bool',
        'departments' => 'string[]',
        'offices' => 'string[]',
        'hiring_managers' => 'string[]',
        'recruiters' => 'string[]',
        'remote_data' => '\MergeATSClient\Model\RemoteData[]',
        'remote_was_deleted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'remote_id' => null,
        'name' => null,
        'description' => null,
        'code' => null,
        'status' => null,
        'job_posting_urls' => null,
        'remote_created_at' => 'date-time',
        'remote_updated_at' => 'date-time',
        'confidential' => null,
        'departments' => 'uuid',
        'offices' => 'uuid',
        'hiring_managers' => 'uuid',
        'recruiters' => 'uuid',
        'remote_data' => null,
        'remote_was_deleted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'remote_id' => 'remote_id',
        'name' => 'name',
        'description' => 'description',
        'code' => 'code',
        'status' => 'status',
        'job_posting_urls' => 'job_posting_urls',
        'remote_created_at' => 'remote_created_at',
        'remote_updated_at' => 'remote_updated_at',
        'confidential' => 'confidential',
        'departments' => 'departments',
        'offices' => 'offices',
        'hiring_managers' => 'hiring_managers',
        'recruiters' => 'recruiters',
        'remote_data' => 'remote_data',
        'remote_was_deleted' => 'remote_was_deleted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'remote_id' => 'setRemoteId',
        'name' => 'setName',
        'description' => 'setDescription',
        'code' => 'setCode',
        'status' => 'setStatus',
        'job_posting_urls' => 'setJobPostingUrls',
        'remote_created_at' => 'setRemoteCreatedAt',
        'remote_updated_at' => 'setRemoteUpdatedAt',
        'confidential' => 'setConfidential',
        'departments' => 'setDepartments',
        'offices' => 'setOffices',
        'hiring_managers' => 'setHiringManagers',
        'recruiters' => 'setRecruiters',
        'remote_data' => 'setRemoteData',
        'remote_was_deleted' => 'setRemoteWasDeleted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'remote_id' => 'getRemoteId',
        'name' => 'getName',
        'description' => 'getDescription',
        'code' => 'getCode',
        'status' => 'getStatus',
        'job_posting_urls' => 'getJobPostingUrls',
        'remote_created_at' => 'getRemoteCreatedAt',
        'remote_updated_at' => 'getRemoteUpdatedAt',
        'confidential' => 'getConfidential',
        'departments' => 'getDepartments',
        'offices' => 'getOffices',
        'hiring_managers' => 'getHiringManagers',
        'recruiters' => 'getRecruiters',
        'remote_data' => 'getRemoteData',
        'remote_was_deleted' => 'getRemoteWasDeleted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['remote_id'] = $data['remote_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['job_posting_urls'] = $data['job_posting_urls'] ?? null;
        $this->container['remote_created_at'] = $data['remote_created_at'] ?? null;
        $this->container['remote_updated_at'] = $data['remote_updated_at'] ?? null;
        $this->container['confidential'] = $data['confidential'] ?? null;
        $this->container['departments'] = $data['departments'] ?? null;
        $this->container['offices'] = $data['offices'] ?? null;
        $this->container['hiring_managers'] = $data['hiring_managers'] ?? null;
        $this->container['recruiters'] = $data['recruiters'] ?? null;
        $this->container['remote_data'] = $data['remote_data'] ?? null;
        $this->container['remote_was_deleted'] = $data['remote_was_deleted'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets remote_id
     *
     * @return string|null
     */
    public function getRemoteId()
    {
        return $this->container['remote_id'];
    }

    /**
     * Sets remote_id
     *
     * @param string|null $remote_id The third-party API ID of the matching object.
     *
     * @return self
     */
    public function setRemoteId($remote_id)
    {
        $this->container['remote_id'] = $remote_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The job's name.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The job's description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code The job's code. Typically an additional identifier used to reference the particular job that is displayed on the ATS.
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets status
     *
     * @return JobStatusEnum|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param JobStatusEnum|null $status The job's status.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets job_posting_urls
     *
     * @return \MergeATSClient\Model\Url[]|null
     */
    public function getJobPostingUrls()
    {
        return $this->container['job_posting_urls'];
    }

    /**
     * Sets job_posting_urls
     *
     * @param \MergeATSClient\Model\Url[]|null $job_posting_urls job_posting_urls
     *
     * @return self
     */
    public function setJobPostingUrls($job_posting_urls)
    {
        $this->container['job_posting_urls'] = $job_posting_urls;

        return $this;
    }

    /**
     * Gets remote_created_at
     *
     * @return \DateTime|null
     */
    public function getRemoteCreatedAt()
    {
        return $this->container['remote_created_at'];
    }

    /**
     * Sets remote_created_at
     *
     * @param \DateTime|null $remote_created_at When the third party's job was created.
     *
     * @return self
     */
    public function setRemoteCreatedAt($remote_created_at)
    {
        $this->container['remote_created_at'] = $remote_created_at;

        return $this;
    }

    /**
     * Gets remote_updated_at
     *
     * @return \DateTime|null
     */
    public function getRemoteUpdatedAt()
    {
        return $this->container['remote_updated_at'];
    }

    /**
     * Sets remote_updated_at
     *
     * @param \DateTime|null $remote_updated_at When the third party's job was updated.
     *
     * @return self
     */
    public function setRemoteUpdatedAt($remote_updated_at)
    {
        $this->container['remote_updated_at'] = $remote_updated_at;

        return $this;
    }

    /**
     * Gets confidential
     *
     * @return bool|null
     */
    public function getConfidential()
    {
        return $this->container['confidential'];
    }

    /**
     * Sets confidential
     *
     * @param bool|null $confidential Whether the job is confidential.
     *
     * @return self
     */
    public function setConfidential($confidential)
    {
        $this->container['confidential'] = $confidential;

        return $this;
    }

    /**
     * Gets departments
     *
     * @return string[]|null
     */
    public function getDepartments()
    {
        return $this->container['departments'];
    }

    /**
     * Sets departments
     *
     * @param string[]|null $departments IDs of `Department` objects for this `Job`.
     *
     * @return self
     */
    public function setDepartments($departments)
    {
        $this->container['departments'] = $departments;

        return $this;
    }

    /**
     * Gets offices
     *
     * @return string[]|null
     */
    public function getOffices()
    {
        return $this->container['offices'];
    }

    /**
     * Sets offices
     *
     * @param string[]|null $offices IDs of `Office` objects for this `Job`.
     *
     * @return self
     */
    public function setOffices($offices)
    {
        $this->container['offices'] = $offices;

        return $this;
    }

    /**
     * Gets hiring_managers
     *
     * @return string[]|null
     */
    public function getHiringManagers()
    {
        return $this->container['hiring_managers'];
    }

    /**
     * Sets hiring_managers
     *
     * @param string[]|null $hiring_managers IDs of `RemoteUser` objects that serve as hiring managers for this `Job`.
     *
     * @return self
     */
    public function setHiringManagers($hiring_managers)
    {
        $this->container['hiring_managers'] = $hiring_managers;

        return $this;
    }

    /**
     * Gets recruiters
     *
     * @return string[]|null
     */
    public function getRecruiters()
    {
        return $this->container['recruiters'];
    }

    /**
     * Sets recruiters
     *
     * @param string[]|null $recruiters IDs of `RemoteUser` objects that serve as recruiters for this `Job`.
     *
     * @return self
     */
    public function setRecruiters($recruiters)
    {
        $this->container['recruiters'] = $recruiters;

        return $this;
    }

    /**
     * Gets remote_data
     *
     * @return \MergeATSClient\Model\RemoteData[]|null
     */
    public function getRemoteData()
    {
        return $this->container['remote_data'];
    }

    /**
     * Sets remote_data
     *
     * @param \MergeATSClient\Model\RemoteData[]|null $remote_data remote_data
     *
     * @return self
     */
    public function setRemoteData($remote_data)
    {
        $this->container['remote_data'] = $remote_data;

        return $this;
    }

    /**
     * Gets remote_was_deleted
     *
     * @return bool|null
     */
    public function getRemoteWasDeleted()
    {
        return $this->container['remote_was_deleted'];
    }

    /**
     * Sets remote_was_deleted
     *
     * @param bool|null $remote_was_deleted Indicates whether or not this object has been deleted by third party webhooks.
     *
     * @return self
     */
    public function setRemoteWasDeleted($remote_was_deleted)
    {
        $this->container['remote_was_deleted'] = $remote_was_deleted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


