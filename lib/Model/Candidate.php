<?php
/**
 * Candidate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  MergeATSClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Merge ATS API
 *
 * The unified API for building rich integrations with multiple Applicant Tracking System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MergeATSClient\Model;

use \ArrayAccess;
use \MergeATSClient\ObjectSerializer;

/**
 * Candidate Class Doc Comment
 *
 * @category Class
 * @description # The Candidate Object ### Description The &#x60;Candidate&#x60; object is used to represent a Candidate for various positions. ### Usage Example Fetch from the &#x60;LIST Candidates&#x60; endpoint and filter by &#x60;ID&#x60; to show all candidates.
 * @package  MergeATSClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Candidate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Candidate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'remote_id' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'company' => 'string',
        'title' => 'string',
        'remote_created_at' => '\DateTime',
        'remote_updated_at' => '\DateTime',
        'last_interaction_at' => '\DateTime',
        'is_private' => 'bool',
        'can_email' => 'bool',
        'locations' => 'string[]',
        'phone_numbers' => '\MergeATSClient\Model\PhoneNumber[]',
        'email_addresses' => '\MergeATSClient\Model\EmailAddress[]',
        'urls' => '\MergeATSClient\Model\Url[]',
        'tags' => 'string[]',
        'applications' => 'string[]',
        'attachments' => 'string[]',
        'remote_data' => '\MergeATSClient\Model\RemoteData[]',
        'custom_fields' => 'array<string,mixed>',
        'remote_was_deleted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'remote_id' => null,
        'first_name' => null,
        'last_name' => null,
        'company' => null,
        'title' => null,
        'remote_created_at' => 'date-time',
        'remote_updated_at' => 'date-time',
        'last_interaction_at' => 'date-time',
        'is_private' => null,
        'can_email' => null,
        'locations' => null,
        'phone_numbers' => null,
        'email_addresses' => null,
        'urls' => null,
        'tags' => null,
        'applications' => 'uuid',
        'attachments' => 'uuid',
        'remote_data' => null,
        'custom_fields' => null,
        'remote_was_deleted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'remote_id' => 'remote_id',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'company' => 'company',
        'title' => 'title',
        'remote_created_at' => 'remote_created_at',
        'remote_updated_at' => 'remote_updated_at',
        'last_interaction_at' => 'last_interaction_at',
        'is_private' => 'is_private',
        'can_email' => 'can_email',
        'locations' => 'locations',
        'phone_numbers' => 'phone_numbers',
        'email_addresses' => 'email_addresses',
        'urls' => 'urls',
        'tags' => 'tags',
        'applications' => 'applications',
        'attachments' => 'attachments',
        'remote_data' => 'remote_data',
        'custom_fields' => 'custom_fields',
        'remote_was_deleted' => 'remote_was_deleted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'remote_id' => 'setRemoteId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'company' => 'setCompany',
        'title' => 'setTitle',
        'remote_created_at' => 'setRemoteCreatedAt',
        'remote_updated_at' => 'setRemoteUpdatedAt',
        'last_interaction_at' => 'setLastInteractionAt',
        'is_private' => 'setIsPrivate',
        'can_email' => 'setCanEmail',
        'locations' => 'setLocations',
        'phone_numbers' => 'setPhoneNumbers',
        'email_addresses' => 'setEmailAddresses',
        'urls' => 'setUrls',
        'tags' => 'setTags',
        'applications' => 'setApplications',
        'attachments' => 'setAttachments',
        'remote_data' => 'setRemoteData',
        'custom_fields' => 'setCustomFields',
        'remote_was_deleted' => 'setRemoteWasDeleted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'remote_id' => 'getRemoteId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'company' => 'getCompany',
        'title' => 'getTitle',
        'remote_created_at' => 'getRemoteCreatedAt',
        'remote_updated_at' => 'getRemoteUpdatedAt',
        'last_interaction_at' => 'getLastInteractionAt',
        'is_private' => 'getIsPrivate',
        'can_email' => 'getCanEmail',
        'locations' => 'getLocations',
        'phone_numbers' => 'getPhoneNumbers',
        'email_addresses' => 'getEmailAddresses',
        'urls' => 'getUrls',
        'tags' => 'getTags',
        'applications' => 'getApplications',
        'attachments' => 'getAttachments',
        'remote_data' => 'getRemoteData',
        'custom_fields' => 'getCustomFields',
        'remote_was_deleted' => 'getRemoteWasDeleted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['remote_id'] = $data['remote_id'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['company'] = $data['company'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['remote_created_at'] = $data['remote_created_at'] ?? null;
        $this->container['remote_updated_at'] = $data['remote_updated_at'] ?? null;
        $this->container['last_interaction_at'] = $data['last_interaction_at'] ?? null;
        $this->container['is_private'] = $data['is_private'] ?? null;
        $this->container['can_email'] = $data['can_email'] ?? null;
        $this->container['locations'] = $data['locations'] ?? null;
        $this->container['phone_numbers'] = $data['phone_numbers'] ?? null;
        $this->container['email_addresses'] = $data['email_addresses'] ?? null;
        $this->container['urls'] = $data['urls'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['applications'] = $data['applications'] ?? null;
        $this->container['attachments'] = $data['attachments'] ?? null;
        $this->container['remote_data'] = $data['remote_data'] ?? null;
        $this->container['custom_fields'] = $data['custom_fields'] ?? null;
        $this->container['remote_was_deleted'] = $data['remote_was_deleted'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets remote_id
     *
     * @return string|null
     */
    public function getRemoteId()
    {
        return $this->container['remote_id'];
    }

    /**
     * Sets remote_id
     *
     * @param string|null $remote_id The third-party API ID of the matching object.
     *
     * @return self
     */
    public function setRemoteId($remote_id)
    {
        $this->container['remote_id'] = $remote_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The candidate's first name.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The candidate's last name.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company The candidate's current company.
     *
     * @return self
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The candidate's current title.
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets remote_created_at
     *
     * @return \DateTime|null
     */
    public function getRemoteCreatedAt()
    {
        return $this->container['remote_created_at'];
    }

    /**
     * Sets remote_created_at
     *
     * @param \DateTime|null $remote_created_at When the third party's candidate was created.
     *
     * @return self
     */
    public function setRemoteCreatedAt($remote_created_at)
    {
        $this->container['remote_created_at'] = $remote_created_at;

        return $this;
    }

    /**
     * Gets remote_updated_at
     *
     * @return \DateTime|null
     */
    public function getRemoteUpdatedAt()
    {
        return $this->container['remote_updated_at'];
    }

    /**
     * Sets remote_updated_at
     *
     * @param \DateTime|null $remote_updated_at When the third party's candidate was updated.
     *
     * @return self
     */
    public function setRemoteUpdatedAt($remote_updated_at)
    {
        $this->container['remote_updated_at'] = $remote_updated_at;

        return $this;
    }

    /**
     * Gets last_interaction_at
     *
     * @return \DateTime|null
     */
    public function getLastInteractionAt()
    {
        return $this->container['last_interaction_at'];
    }

    /**
     * Sets last_interaction_at
     *
     * @param \DateTime|null $last_interaction_at When the most recent candidate interaction occurred.
     *
     * @return self
     */
    public function setLastInteractionAt($last_interaction_at)
    {
        $this->container['last_interaction_at'] = $last_interaction_at;

        return $this;
    }

    /**
     * Gets is_private
     *
     * @return bool|null
     */
    public function getIsPrivate()
    {
        return $this->container['is_private'];
    }

    /**
     * Sets is_private
     *
     * @param bool|null $is_private Whether or not the candidate is private.
     *
     * @return self
     */
    public function setIsPrivate($is_private)
    {
        $this->container['is_private'] = $is_private;

        return $this;
    }

    /**
     * Gets can_email
     *
     * @return bool|null
     */
    public function getCanEmail()
    {
        return $this->container['can_email'];
    }

    /**
     * Sets can_email
     *
     * @param bool|null $can_email Whether or not the candidate can be emailed.
     *
     * @return self
     */
    public function setCanEmail($can_email)
    {
        $this->container['can_email'] = $can_email;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return string[]|null
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param string[]|null $locations The candidate's locations.
     *
     * @return self
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets phone_numbers
     *
     * @return \MergeATSClient\Model\PhoneNumber[]|null
     */
    public function getPhoneNumbers()
    {
        return $this->container['phone_numbers'];
    }

    /**
     * Sets phone_numbers
     *
     * @param \MergeATSClient\Model\PhoneNumber[]|null $phone_numbers phone_numbers
     *
     * @return self
     */
    public function setPhoneNumbers($phone_numbers)
    {
        $this->container['phone_numbers'] = $phone_numbers;

        return $this;
    }

    /**
     * Gets email_addresses
     *
     * @return \MergeATSClient\Model\EmailAddress[]|null
     */
    public function getEmailAddresses()
    {
        return $this->container['email_addresses'];
    }

    /**
     * Sets email_addresses
     *
     * @param \MergeATSClient\Model\EmailAddress[]|null $email_addresses email_addresses
     *
     * @return self
     */
    public function setEmailAddresses($email_addresses)
    {
        $this->container['email_addresses'] = $email_addresses;

        return $this;
    }

    /**
     * Gets urls
     *
     * @return \MergeATSClient\Model\Url[]|null
     */
    public function getUrls()
    {
        return $this->container['urls'];
    }

    /**
     * Sets urls
     *
     * @param \MergeATSClient\Model\Url[]|null $urls urls
     *
     * @return self
     */
    public function setUrls($urls)
    {
        $this->container['urls'] = $urls;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags Array of `Tag` names as strings.
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets applications
     *
     * @return string[]|null
     */
    public function getApplications()
    {
        return $this->container['applications'];
    }

    /**
     * Sets applications
     *
     * @param string[]|null $applications Array of `Application` object IDs.
     *
     * @return self
     */
    public function setApplications($applications)
    {
        $this->container['applications'] = $applications;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return string[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param string[]|null $attachments Array of `Attachment` object IDs.
     *
     * @return self
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets remote_data
     *
     * @return \MergeATSClient\Model\RemoteData[]|null
     */
    public function getRemoteData()
    {
        return $this->container['remote_data'];
    }

    /**
     * Sets remote_data
     *
     * @param \MergeATSClient\Model\RemoteData[]|null $remote_data remote_data
     *
     * @return self
     */
    public function setRemoteData($remote_data)
    {
        $this->container['remote_data'] = $remote_data;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return array<string,mixed>|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param array<string,mixed>|null $custom_fields Custom fields configured for a given model.
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets remote_was_deleted
     *
     * @return bool|null
     */
    public function getRemoteWasDeleted()
    {
        return $this->container['remote_was_deleted'];
    }

    /**
     * Sets remote_was_deleted
     *
     * @param bool|null $remote_was_deleted remote_was_deleted
     *
     * @return self
     */
    public function setRemoteWasDeleted($remote_was_deleted)
    {
        $this->container['remote_was_deleted'] = $remote_was_deleted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


