<?php
/**
 * MetaResponse
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  MergeATSClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Merge ATS API
 *
 * The unified API for building rich integrations with multiple Applicant Tracking System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MergeATSClient\Model;

use \ArrayAccess;
use \MergeATSClient\ObjectSerializer;

/**
 * MetaResponse Class Doc Comment
 *
 * @category Class
 * @package  MergeATSClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MetaResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MetaResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'request_schema' => 'array<string,mixed>',
        'status' => '\MergeATSClient\Model\LinkedAccountStatus',
        'has_conditional_params' => 'bool',
        'has_required_linked_account_params' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'request_schema' => null,
        'status' => null,
        'has_conditional_params' => null,
        'has_required_linked_account_params' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_schema' => 'request_schema',
        'status' => 'status',
        'has_conditional_params' => 'has_conditional_params',
        'has_required_linked_account_params' => 'has_required_linked_account_params'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_schema' => 'setRequestSchema',
        'status' => 'setStatus',
        'has_conditional_params' => 'setHasConditionalParams',
        'has_required_linked_account_params' => 'setHasRequiredLinkedAccountParams'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_schema' => 'getRequestSchema',
        'status' => 'getStatus',
        'has_conditional_params' => 'getHasConditionalParams',
        'has_required_linked_account_params' => 'getHasRequiredLinkedAccountParams'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request_schema'] = $data['request_schema'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['has_conditional_params'] = $data['has_conditional_params'] ?? null;
        $this->container['has_required_linked_account_params'] = $data['has_required_linked_account_params'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['request_schema'] === null) {
            $invalidProperties[] = "'request_schema' can't be null";
        }
        if ($this->container['has_conditional_params'] === null) {
            $invalidProperties[] = "'has_conditional_params' can't be null";
        }
        if ($this->container['has_required_linked_account_params'] === null) {
            $invalidProperties[] = "'has_required_linked_account_params' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_schema
     *
     * @return array<string,mixed>
     */
    public function getRequestSchema()
    {
        return $this->container['request_schema'];
    }

    /**
     * Sets request_schema
     *
     * @param array<string,mixed> $request_schema request_schema
     *
     * @return self
     */
    public function setRequestSchema($request_schema)
    {
        $this->container['request_schema'] = $request_schema;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \MergeATSClient\Model\LinkedAccountStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \MergeATSClient\Model\LinkedAccountStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets has_conditional_params
     *
     * @return bool
     */
    public function getHasConditionalParams()
    {
        return $this->container['has_conditional_params'];
    }

    /**
     * Sets has_conditional_params
     *
     * @param bool $has_conditional_params has_conditional_params
     *
     * @return self
     */
    public function setHasConditionalParams($has_conditional_params)
    {
        $this->container['has_conditional_params'] = $has_conditional_params;

        return $this;
    }

    /**
     * Gets has_required_linked_account_params
     *
     * @return bool
     */
    public function getHasRequiredLinkedAccountParams()
    {
        return $this->container['has_required_linked_account_params'];
    }

    /**
     * Sets has_required_linked_account_params
     *
     * @param bool $has_required_linked_account_params has_required_linked_account_params
     *
     * @return self
     */
    public function setHasRequiredLinkedAccountParams($has_required_linked_account_params)
    {
        $this->container['has_required_linked_account_params'] = $has_required_linked_account_params;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


